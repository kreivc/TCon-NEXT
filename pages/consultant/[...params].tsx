import {
	Box,
	Button,
	Heading,
	HStack,
	Image,
	Text,
	VStack,
} from "@chakra-ui/react";
import axios from "axios";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { HiArrowNarrowRight } from "react-icons/hi";
import { useAppSelector } from "../../store/hooks";
import { selectUser } from "../../store/UserSLice";

type ConsultantProps = {
	details: {
		bio: string;
		education: string;
		expeience: string;
		honors: string;
		rating: number;
		userId: string;
	};
};

type InitialProps = {
	data: {
		params: string[];
	};
};

const Consultant = ({ data }: InitialProps) => {
	const [consultant, setConsultant] = useState<ConsultantProps | null>();
	const [alias, setAlias] = useState<string>("");
	const user = useAppSelector(selectUser);
	const router = useRouter();
	const { params } = data;

	useEffect(() => {
		const fetch = async () => {
			const res = await axios.post(
				"https://tcon-api.herokuapp.com/consultant/details",
				{ userId: params[0] }
			);
			setConsultant(res.data);
		};
		fetch();
	}, [params]);

	useEffect(() => {
		const image = params[1].split(" ");
		setAlias(
			image.length > 1
				? image[0].charAt(0) + image[1].charAt(0)
				: image[0].charAt(0)
		);
	}, [params]);

	const handleConsult = async () => {
		const date = Date.now();
		await axios
			.put(
				"https://api.chatengine.io/chats/",
				{
					usernames: [user.email, params[2]],
					title: `Consultation_${date}`,
					is_direct_chat: true,
				},
				{
					headers: {
						"Project-ID": "48c2e8af-b857-4a4b-a2b0-3b9ac844e0fe",
						"User-Name": user.email,
						"User-Secret": user.userId,
					},
				}
			)
			.catch((err) => console.log(err));

		router.push("/chat");
	};

	return (
		<>
			<Head>
				<title></title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/tconnotext.png" />
			</Head>
			<Box p={{ base: "10", md: "20" }} pt={{ base: "5", md: "5" }}>
				<HStack>
					<VStack
						justify="center"
						spacing={7}
						borderRadius="md"
						bg="gray.100"
						p="50px 50px"
						minW="400px"
						maxW="400px"
						minH="500px"
						mx={10}
					>
						<Heading textAlign="center" color="gray.900">
							{params[1]}
						</Heading>
						<Image
							src={`https://avatars.dicebear.com/api/initials/:${alias}.svg`}
							alt="PP"
							borderRadius="full"
							boxSize="160px"
						/>
						<HStack
							spacing={3}
							bg="gray.200"
							borderRadius="md"
							py={2}
							px={3}
							fontSize="sm"
						>
							<Text color="gray.600">Consult</Text>
							<Text color="gray.400">30 minute</Text>
							<Text color="gray.600">30k</Text>
						</HStack>
						<Button
							leftIcon={<HiArrowNarrowRight />}
							fontSize="medium"
							color="white"
							bg="#52C8FA"
							_hover={{ bg: "#60cdfc" }}
							cursor="pointer"
							px="8"
							onClick={handleConsult}
						>
							Consult Now
						</Button>
					</VStack>
					<VStack mx={10} overflow="auto" maxH="500px">
						<Heading color="gray.900">About</Heading>
						<VStack spacing={5}>
							<Box w="full">
								<Heading fontSize="2xl" color="gray.900">
									Bio
								</Heading>
								<Text>{consultant?.details.bio}</Text>
							</Box>
							<Box w="full">
								<Heading fontSize="2xl" color="gray.900">
									Education
								</Heading>
								<Text>{consultant?.details.education}</Text>
							</Box>
							<Box w="full">
								<Heading fontSize="2xl" color="gray.900">
									Honors
								</Heading>
								<Text>{consultant?.details.honors}</Text>
							</Box>
							<Box w="full">
								<Heading fontSize="2xl" color="gray.900">
									Rating
								</Heading>
								<Text>{consultant?.details.rating}</Text>
							</Box>
						</VStack>
					</VStack>
				</HStack>
			</Box>
		</>
	);
};

export default Consultant;

export const getServerSideProps: GetServerSideProps = async (context) => {
	try {
		const data = context.params;
		return { props: { data } };
	} catch (err) {
		return { props: { errors: err.message } };
	}
};
